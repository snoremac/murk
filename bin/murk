#!/usr/bin/env ruby

$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')

require 'logger'
require 'clamp'
require 'murk'

Clamp do

  def fail_with_exception(e)
    cause = e.cause || e
    $stderr.puts e.message
    $stderr.puts cause.message
    if debug?
      $stderr.puts cause.backtrace
    end
    exit 2
  end

  subcommand 'create', 'Create a stack' do
    option "--stack", "STACK", "Stack name to create", required: true, attribute_name: :stack_name
    option "--env", "ENV", "Name  of the environment", required: true
    option "--file", "CONFIG_FILE", "Config file", default: "./config/murk.rb"
    option "--wait", :flag, 'Wait for the stack to be created'
    option "--debug", :flag, 'Show backtrace on error'
    parameter "USER", "Name your stack"

    def execute
      stack = Murk.load(file, user).stacks.find_by_name(stack_name, env: env)
      stack.create_or_update
      if wait?
        stack.wait(:stack_create_complete) { print "." }
        puts 'done!'
      end
    rescue StandardError => e
      fail_with_exception(e)
    end
  end

  subcommand 'delete', 'Delete a stack' do
    option "--stack", "STACK", "Stack name to delete", required: true, attribute_name: :stack_name
    option "--env", "ENV", "Name  of the environment", required: true
    option "--file", "CONFIG_FILE", "Config file", default: "./config/murk.rb"
    option "--wait", :flag, 'Wait for the stack to be deleted'
    option "--debug", :flag, 'Show backtrace on error'
    parameter "USER", "Name of your stack"

    def execute
      stack = Murk.load(file, user).stacks.find_by_name(stack_name, env: env)
      stack.delete
      if wait?
        stack.wait(:stack_delete_complete) { print "." }
        puts 'done!'
      end
    rescue StandardError => e
      fail_with_exception(e)
    end
  end
end
